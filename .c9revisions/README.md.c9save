{"ts":1358887700978,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# README for a newly created project.\n\nThere are a couple of things you should do first, before you can use all of Git's power:\n\n  * Add a remote to this project: in the Cloud9 IDE command line, you can execute the following commands\n    `git remote add [remote name] [remote url (eg. 'git@github.com:/ajaxorg/node_chat')]` [Enter]\n  * Create new files inside your project\n  * Add them to to Git by executing the following command\n    `git add [file1, file2, file3, ...]` [Enter]\n  * Create a commit which can be pushed to the remote you just added\n    `git commit -m 'added new files'` [Enter]\n  * Push the commit the remote\n    `git push [remote name] master` [Enter]\n\nThat's it! If this doesn't work for you, please visit the excellent resources from [Github.com](http://help.github.com) and the [Pro Git](http://http://progit.org/book/) book.\nIf you can't find your answers there, feel free to ask us via Twitter (@cloud9ide), [mailing list](groups.google.com/group/cloud9-ide) or IRC (#cloud9ide on freenode).\n\nHappy coding!"]],"start1":0,"start2":0,"length1":0,"length2":1029}]],"length":1029}
{"contributors":[],"silentsave":false,"ts":1358898729526,"patch":[[{"diffs":[[-1,"# README for a newly created project.\n\nThere are a couple of things you should do fir"],[1,"Pipeline.js\n===========\n\nPipeline-js enables easy setup of complex async queues in javascript.\nIt is implemented in pure javascript (meaning it can be used in popular\nframeworks such as jQuery or MooTools) and should work in mo"],[0,"st"],[-1,","],[0," b"],[-1,"efore you can use all of Git's power:\n\n  * Add a remote to this project: in the Cloud9 IDE command line, you can execute the following commands\n    `git remote add [remote name] [remote url (eg. 'git@github.com:/ajaxorg/node_chat')]` [Enter]\n  * Create new files inside your project\n  * Add them to to Git by executing the following command\n    `git add [file1, file2, file3, ...]` [Enter]\n  * Create a commit which can be pushed to th"],[1,"rowsers as well\nas in node.js (has not been extensively tested in either).\n\nHow to Use\n----------\n\nThe easiest way to see what Pipeline-js supports is to look at the source, or\nthe supplied unittests availible. The unit-tests should provide a simple way to\nsee all the functionallity there is, however I will try to highlight the main\n(and most of) the features here.\n\nThe way to construct a pipeline is by using the `Pipeline`-function, and adding\n\"pipes\" to it, then calling the `create` function on the Pipeline-builder.\n\nAn example of a pipeline used for saving and updating could for instance look\nlike this:\n\n```javascript\nvar saveAndUpdate = Pipeline().start(function() {\n    showSavingDiv();\n}).pipeAsync(function(state, cb) {\n    sendXhr('/save', state.data, function(result) {\n        state.result = result;\n        cb();\n    });\n}).pipe(function(state) {\n    var result = state.result;\n    if(result.updateGui) {\n        update(state.id, result);\n    }\n}).stop(function() {\n    hideSavingDiv();\n}).create();\n\nfunction myButton1OnClick() {\n    var data = getFormData(this);\n    var id = getId(this);\n    saveAndUpdate({id: id, data: data});\n}\n```\n\nTher"],[0,"e "],[1,"a"],[0,"re"],[-1,"mote you just added\n    `git commit -m 'added new files'` [Enter]\n  * Push the commit the remote\n    `git push [remote name] master` [Enter]\n\nThat's it! If this doesn't work for you, please visit the excellent resources from [Github.com](http://help.github.com) and the [Pro Git](http://http://progit.org/book/) book.\nIf you can't find your answers there, feel fre"],[1," 3 main functions on the Pipeline-builder, these are:\n\n*   `Builder start[Async](Function fn)`: Add a startup-action (only called when the pipeline goes from doing nothing to doing something.\n*   `Builder stop[Async](Function fn)`: Add a stop-action (only called when the pipeline is done with it's entire queue, and goes to sleep.\n*   `Builder pipe[sync](Function fn)`: Add a pipe to the pipeline. Pipes are (like start and stop actions) called in turn, but they are called in turn for each item submitted into the pipeline.\n*   `Pipeline create()`: Creates a pipeline from the builder. The builder cannot be used more after this. Use the Pipeline as a function to commit new items.\n\n\nThe Pipeline has 2 functions:\n\n*   `Undefined once(Function fn)`: Runs the function fn either immediately, or the first time the pipeline is empty (after th"],[0,"e "],[1,"s"],[0,"to"],[-1," ask us via Twitter (@cloud9ide), [mailing list](groups.google.com/group/cloud9-ide) or IRC (#"],[1,"p-calls has been made).\n*   `Number backlog()`: Returns the number of items in the backlog (queue) of the pipeline. This does not in"],[0,"cl"],[-1,"o"],[0,"ud"],[-1,"9ide on freenode).\n\nHappy coding!"],[1,"e the ellement currently in the \"pipes\"."]],"start1":0,"start2":0,"length1":1029,"length2":2421}]],"length":2421,"saved":false}
